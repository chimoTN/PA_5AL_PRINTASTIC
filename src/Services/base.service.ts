// src/services/base.service.ts
import { API_BASE_URL } from '../config/env';

export interface AuthUser {
  id: number;
  email: string;
  nom: string;
  prenom: string;
  role: 'CLIENT' | 'IMPRIMEUR' | 'PROPRIETAIRE';
}

export interface AuthResponse {
  success: boolean;
  message?: string;
  user?: AuthUser;
  utilisateur?: AuthUser; // Compatibilit√© avec votre backend
}

// ‚úÖ AJOUT : Interface AuthContextType manquante
export interface AuthContextType {
  isAuthenticated: boolean;
  user: AuthUser | null;
  isLoading: boolean;
  error: string | null;
  login: (email: string, motDePasse: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshAuth: () => Promise<void>;
}

export interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  data?: T;
  error?: string;
}

// ‚úÖ AJOUT : Interface pour les files (coh√©rent avec votre backend)
export interface FileClient {
  id: number;
  nom: string;
  cheminFichier: string;
  tailleFichier: number;
  typeContenu: string;
  estVerifie: boolean;
  dateCreation: string;
  dateModification: string;
  utilisateurId: number;
  utilisateur?: {
    id: number;
    email: string;
    nom: string;
    prenom: string;
  };
}

export interface FileClientResponse {
  success: boolean;
  message?: string;
  files?: FileClient[];
  file?: FileClient;
}

class BaseService {
  private baseURL: string;

  constructor() {
    this.baseURL = API_BASE_URL || 'http://127.0.0.1:3000/api';
    console.log('üèóÔ∏è BaseService initialis√© avec baseURL:', this.baseURL);
  }

  // ‚úÖ CORRECTION : Plus besoin de headers JWT, juste les cookies
  private prepareHeaders(options: RequestInit = {}): Record<string, string> {
    const defaultHeaders: Record<string, string> = {
      'Accept': 'application/json',
    };

    // ‚úÖ Ne pas d√©finir Content-Type pour FormData (le navigateur le fait automatiquement)
    const isFormData = options.body instanceof FormData;
    if (!isFormData && options.method !== 'GET') {
      defaultHeaders['Content-Type'] = 'application/json';
    }

    // ‚úÖ Fusionner avec les headers personnalis√©s
    const customHeaders = options.headers as Record<string, string> || {};
    
    console.log('üè∑Ô∏è Headers pr√©par√©s:', {
      ...defaultHeaders,
      ...customHeaders,
      authMode: 'Session/Cookie'
    });

    return { ...defaultHeaders, ...customHeaders };
  }

  private buildUrl(endpoint: string): string {
    const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;
    const finalUrl = `${this.baseURL}${cleanEndpoint}`;
    
    console.log('üåê Construction URL:', {
      baseURL: this.baseURL,
      endpoint: cleanEndpoint,
      finalUrl: finalUrl
    });
    
    return finalUrl;
  }

  // ‚úÖ CORRECTION : M√©thode request simplifi√©e pour les sessions
  async request<T = any>(
    endpoint: string,
    options: RequestInit = {},
    onProgress?: (progress: number) => void
  ): Promise<T> {
    const url = this.buildUrl(endpoint);
    const headers = this.prepareHeaders(options);
    
    const defaultOptions: RequestInit = {
      credentials: 'include', // ‚úÖ CRUCIAL pour les cookies de session
      headers,
      ...options,
    };

    console.log('üì° Requ√™te pr√©par√©e:', {
      method: options.method || 'GET',
      url,
      headers,
      bodyType: options.body?.constructor.name || 'none',
      hasBody: !!options.body,
      credentials: 'include'
    });

    // ‚úÖ Upload avec progression si n√©cessaire
    if (onProgress && options.body instanceof FormData) {
      return this.requestWithProgress<T>(url, defaultOptions, onProgress);
    }

    // ‚úÖ Requ√™te fetch normale
    try {
      console.log(`üîÑ FETCH ${options.method || 'GET'} ${url}`);
      
      const response = await fetch(url, defaultOptions);
      
      console.log('üì° Response re√ßue:', {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
        ok: response.ok
      });
      
      if (!response.ok) {
        let errorMessage = `Erreur HTTP ${response.status}`;
        
        // ‚úÖ Gestion sp√©cifique des erreurs de session
        switch (response.status) {
          case 401:
            errorMessage = 'Session expir√©e - veuillez vous reconnecter';
            break;
          case 403:
            errorMessage = 'Acc√®s refus√© - permissions insuffisantes';
            break;
          case 404:
            errorMessage = 'Ressource non trouv√©e';
            break;
          case 413:
            errorMessage = 'Fichier trop volumineux';
            break;
          case 500:
            errorMessage = 'Erreur interne du serveur';
            break;
        }
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorData.error || errorMessage;
          console.error('‚ùå Erreur serveur d√©taill√©e:', errorData);
        } catch (parseError) {
          console.warn('‚ö†Ô∏è Impossible de parser l\'erreur JSON');
        }
        
        console.error(`‚ùå Erreur ${response.status}:`, errorMessage);
        throw new Error(errorMessage);
      }
      
      // ‚úÖ Traitement de la r√©ponse
      const contentType = response.headers.get('Content-Type') || '';
      
      if (contentType.includes('application/json')) {
        const jsonResponse = await response.json();
        console.log('‚úÖ R√©ponse JSON pars√©e:', jsonResponse);
        return jsonResponse;
      } else {
        const textResponse = await response.text();
        console.log('‚úÖ R√©ponse texte re√ßue:', textResponse);
        return { success: true, data: textResponse } as unknown as T;
      }
      
    } catch (error: any) {
      console.error('‚ùå Erreur dans request:', error);
      
      // ‚úÖ CORRECTION : Meilleure gestion des erreurs de connexion
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        throw new Error('Erreur de connexion - v√©rifiez que le serveur est accessible');
      }
      
      if (error.name === 'AbortError') {
        throw new Error('Requ√™te annul√©e');
      }
      
      throw error;
    }
  }

  // ‚úÖ CORRECTION : XMLHttpRequest pour upload avec session
  private requestWithProgress<T>(
    url: string,
    options: RequestInit,
    onProgress: (progress: number) => void
  ): Promise<T> {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      
      // ‚úÖ Configuration de la progression
      if (xhr.upload) {
        xhr.upload.addEventListener('loadstart', () => {
          console.log('üöÄ D√©but de l\'upload');
        });
        
        xhr.upload.addEventListener('progress', (event) => {
          if (event.lengthComputable) {
            const progress = Math.round((event.loaded * 100) / event.total);
            onProgress(progress);
            console.log(`üìä Upload progression: ${progress}% (${event.loaded}/${event.total} bytes)`);
          }
        });
        
        xhr.upload.addEventListener('load', () => {
          console.log('üì§ Upload termin√©');
        });
        
        xhr.upload.addEventListener('error', () => {
          console.error('‚ùå Erreur upload');
        });
      }
      
      // ‚úÖ Gestion des √©v√©nements
      xhr.onload = () => {
        console.log('üì° XHR Response:', {
          status: xhr.status,
          statusText: xhr.statusText,
          responseURL: xhr.responseURL,
          responseText: xhr.responseText.substring(0, 200) + '...' // Truncated pour les logs
        });
        
        if (xhr.status >= 200 && xhr.status < 300) {
          try {
            const response = JSON.parse(xhr.responseText);
            console.log('‚úÖ Upload r√©ussi:', response);
            resolve(response);
          } catch (parseError) {
            console.warn('‚ö†Ô∏è Erreur parsing JSON, mais upload r√©ussi');
            resolve({ success: true, message: 'Upload r√©ussi' } as unknown as T);
          }
        } else {
          let errorMessage = `Erreur HTTP ${xhr.status}`;
          
          // ‚úÖ Messages d'erreur sp√©cifiques aux sessions
          switch (xhr.status) {
            case 0:
              errorMessage = 'Erreur de connexion r√©seau';
              break;
            case 401:
              errorMessage = 'Session expir√©e - veuillez vous reconnecter';
              break;
            case 403:
              errorMessage = 'Acc√®s refus√©';
              break;
            case 413:
              errorMessage = 'Fichier trop volumineux';
              break;
            case 500:
              errorMessage = 'Erreur interne du serveur';
              break;
          }
          
          try {
            const errorResponse = JSON.parse(xhr.responseText);
            errorMessage = errorResponse.message || errorResponse.error || errorMessage;
            console.error('‚ùå Erreur d√©taill√©e:', errorResponse);
          } catch {
            console.warn('‚ö†Ô∏è Impossible de parser l\'erreur');
          }
          
          console.error(`‚ùå XHR Error ${xhr.status}:`, errorMessage);
          reject(new Error(errorMessage));
        }
      };
      
      xhr.onerror = () => {
        console.error('‚ùå XHR Network Error');
        reject(new Error('Erreur r√©seau lors de la requ√™te'));
      };
      
      xhr.ontimeout = () => {
        console.error('‚ùå XHR Timeout');
        reject(new Error('Timeout - le serveur met trop de temps √† r√©pondre'));
      };
      
      // ‚úÖ Configuration de la requ√™te avec session
      console.log('üîÑ XHR POST', url, '(avec progression et session)');
      xhr.open(options.method || 'POST', url);
      
      // ‚úÖ Ajout des headers (pas de Content-Type pour FormData)
      const headers = options.headers as Record<string, string> || {};
      Object.entries(headers).forEach(([key, value]) => {
        if (key.toLowerCase() !== 'content-type' || !(options.body instanceof FormData)) {
          xhr.setRequestHeader(key, value);
          console.log(`üè∑Ô∏è Header ajout√©: ${key}: ${value}`);
        }
      });
      
      // ‚úÖ Configuration des cookies/session
      xhr.withCredentials = true; // CRUCIAL pour les cookies de session
      xhr.timeout = 120000; // 2 minutes
      
      console.log('üì§ Envoi de la requ√™te XHR avec session...');
      xhr.send(options.body as any);
    });
  }

  // ‚úÖ M√©thodes utilitaires inchang√©es
  async get<T = any>(endpoint: string, options: RequestInit = {}): Promise<T> {
    return this.request<T>(endpoint, { ...options, method: 'GET' });
  }

  async post<T = any>(
    endpoint: string, 
    data?: any, 
    options: RequestInit = {},
    onProgress?: (progress: number) => void
  ): Promise<T> {
    const isFormData = data instanceof FormData;
    
    const requestOptions: RequestInit = {
      ...options,
      method: 'POST',
      body: isFormData ? data : JSON.stringify(data),
    };

    return this.request<T>(endpoint, requestOptions, onProgress);
  }

  async put<T = any>(endpoint: string, data?: any, options: RequestInit = {}): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async patch<T = any>(endpoint: string, data?: any, options: RequestInit = {}): Promise<T> {
    return this.request<T>(endpoint, {
      ...options,
      method: 'PATCH',
      body: JSON.stringify(data),
    });
  }

  async delete<T = any>(endpoint: string, options: RequestInit = {}): Promise<T> {
    return this.request<T>(endpoint, { ...options, method: 'DELETE' });
  }

  // ‚úÖ AJOUT : M√©thode pour tester la session
  async checkSession(): Promise<boolean> {
    try {
      await this.get('/auth/profile');
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Session invalide:', error);
      return false;
    }
  }

  // ‚úÖ AJOUT : M√©thode pour t√©l√©charger des fichiers
  async downloadFile(endpoint: string, filename?: string): Promise<void> {
    try {
      const response = await fetch(this.buildUrl(endpoint), {
        credentials: 'include',
        headers: {
          'Accept': 'application/octet-stream'
        }
      });

      if (!response.ok) {
        throw new Error(`Erreur t√©l√©chargement: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename || 'file';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement:', error);
      throw error;
    }
  }
}

export const baseService = new BaseService();