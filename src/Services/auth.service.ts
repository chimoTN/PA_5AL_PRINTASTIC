<<<<<<< HEAD:src/services/auth.service.ts
// src/services/auth.service.ts
import { baseService, type AuthResponse, type AuthUser } from './base.service';

interface ProfilResponse {
  success: boolean;
  utilisateur?: AuthUser;
  message?: string;
}

class AuthService {
  private currentUser: AuthUser | null = null;

  async login(email: string, password: string): Promise<AuthResponse> {
    try {
      console.log('üë§ Tentative de connexion pour:', email);
      
      const response = await baseService.post<AuthResponse>('/auth/connexion', {
        email,
        motDePasse: password
      });

      console.log('üîç R√©ponse de connexion:', response);

      if (response.success && response.utilisateur) {
        this.currentUser = response.utilisateur;
        localStorage.setItem('user', JSON.stringify(response.utilisateur));
        console.log('‚úÖ Utilisateur connect√© et stock√©:', this.currentUser);
        return response;
      }

      throw new Error(response.message || '√âchec de la connexion');
    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion:', error);
      this.logout();
      throw error;
    }
  }

  async logout(): Promise<void> {
    try {
      // Tentative de d√©connexion c√¥t√© serveur
      await baseService.post('/auth/deconnexion', {});
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors de la d√©connexion serveur:', error);
    } finally {
      // Nettoyage c√¥t√© client
      this.currentUser = null;
      localStorage.removeItem('user');
      console.log('‚úÖ D√©connexion locale effectu√©e');
    }
  }

  getCurrentUser(): AuthUser | null {
    if (!this.currentUser) {
      const userData = localStorage.getItem('user');
      if (userData) {
        try {
          this.currentUser = JSON.parse(userData);
          console.log('üë§ Utilisateur r√©cup√©r√© du localStorage:', this.currentUser);
        } catch (e) {
          console.error('‚ùå Erreur parsing user data:', e);
          localStorage.removeItem('user');
        }
      }
    }
    return this.currentUser;
  }

  isAuthenticated(): boolean {
    const user = this.getCurrentUser();
    const isAuth = !!user;
    console.log('üîç V√©rification authentification locale:', { isAuth, user: user?.email });
    return isAuth;
  }

  // ‚úÖ CORRECTION : Utilisation de la route /api/auth/profil
  async checkSession(): Promise<boolean> {
    try {
      console.log('üîç V√©rification de la session serveur...');
      
      const response = await baseService.get<ProfilResponse>('/auth/profil');
      
      console.log('üì° R√©ponse session:', response);

      if (response.success && response.utilisateur) {
        // Mettre √† jour les infos utilisateur
        this.currentUser = response.utilisateur;
        localStorage.setItem('user', JSON.stringify(response.utilisateur));
        console.log('‚úÖ Session valide, utilisateur mis √† jour:', this.currentUser);
        return true;
      }
      
      console.warn('‚ö†Ô∏è Session invalide');
      this.logout();
      return false;
    } catch (error: any) {
      console.warn('‚ö†Ô∏è Erreur v√©rification session:', error.message);
      
      // Si erreur 401, session expir√©e
      if (error.message?.includes('401') || error.message?.includes('Non authentifi√©')) {
        console.log('üîí Session expir√©e (401)');
        this.logout();
      }
      
      return false;
    }
  }

  // ‚úÖ AJOUT : Rafra√Æchir les donn√©es utilisateur
  async refreshUserData(): Promise<AuthUser> {
    const sessionValid = await this.checkSession();
    if (!sessionValid || !this.currentUser) {
      throw new Error('Session expir√©e - veuillez vous reconnecter');
    }
    return this.currentUser;
  }

  // ‚úÖ AJOUT : V√©rification avec gestion d'erreur sp√©cifique
  async ensureAuthenticated(): Promise<void> {
    const isValid = await this.checkSession();
    if (!isValid) {
      throw new Error('Votre session a expir√©. Veuillez vous reconnecter.');
    }
  }
}

export const authService = new AuthService();
=======
// src/services/api.service.ts
import { API_BASE_URL } from '../config/env';

// Type pour les r√©ponses de l'API
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  utilisateur?: any;
}

// Version simplifi√©e pour l'utilisateur
export interface UserInfo {
  id: number;
  email: string;
  nom?: string;
  prenom?: string;
  role: string;
}

export const apiService = {
  // M√©thode g√©n√©rique pour les requ√™tes
  async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    try {
      const url = `${API_BASE_URL}${endpoint}`;

      console.log(`üöÄ Requ√™te API: ${options.method || 'GET'} ${url}`);
      if (options.body) {
        console.log('üì¶ Donn√©es envoy√©es:', JSON.parse(options.body as string));
      }
      
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Accept': '*/*',
          ...(options.headers || {}),
        },
        // CRITICAL: inclure les cookies avec les requ√™tes
        credentials: 'include',
      });

      if (!response.ok) {
        // Ne pas afficher d'erreur pour les 401 pendant la v√©rification d'authentification silencieuse
        if (response.status === 401 && endpoint === '/api/auth/profil' && options.silent) {
          throw new Error('Non authentifi√©');
        }
        
        const errorText = await response.text();
        console.error(`‚ùå Erreur API (${response.status}):`, errorText);
        throw new Error(`Erreur API (${response.status}): ${errorText}`);
      }

      const data = await response.json();
      return data as T;
    } catch (error) {
      // Ne pas afficher d'erreur de connexion pour les v√©rifications silencieuses
      if (!(options as any).silent) {
        console.error('‚ùå Erreur de connexion:', error);
      }
      throw error;
    }
  },

  auth: {
    // Connexion de l'utilisateur
    async login(email: string, motDePasse: string): Promise<ApiResponse> {
      console.log('üë§ Tentative de connexion pour:', email);
      
      return apiService.request<ApiResponse>('/api/auth/connexion', {
        method: 'POST',
        body: JSON.stringify({ email, motDePasse }),
      });
    },

    // Inscription d'un nouvel utilisateur
    async register(userData: { 
      email: string, 
      motDePasse: string, 
      nom: string, 
      prenom: string 
    }): Promise<ApiResponse> {
      return apiService.request<ApiResponse>('/api/auth/inscription', {
        method: 'POST',
        body: JSON.stringify(userData),
      });
    },

    // R√©cup√©ration du profil de l'utilisateur connect√©
    async getProfile(silent: boolean = false): Promise<ApiResponse> {
      return apiService.request<ApiResponse>('/api/auth/profil', {
        silent, // Passer l'option pour les appels silencieux
      } as any);
    },

    // D√©connexion de l'utilisateur
    async logout(): Promise<void> {
      try {
        await apiService.request<ApiResponse>('/api/auth/deconnexion', {
          method: 'POST',
        });
      } catch (error) {
        console.error('Erreur lors de la d√©connexion:', error);
      }
    },
    
    // V√©rification de l'authentification - M√âTHODE AM√âLIOR√âE
    async checkAuth(): Promise<boolean> {
      try {
        // V√©rifier si un cookie d'authentification existe
        // Note: pour Express/connect.sid qui est le cookie standard de session Express
        const cookies = document.cookie.split(';');
        const authCookieExists = cookies.some(cookie => 
          cookie.trim().startsWith('connect.sid='));
          
        // Si aucun cookie de session, √©viter l'appel API inutile
        if (!authCookieExists) {
          console.log('Aucun cookie de session trouv√©');
          return false;
        }
    
        // Appel API silencieux pour v√©rifier l'authentification
        const response = await this.getProfile(true);
        return response.success === true;
      } catch (error) {
        return false;
      }
    }    
  }
};
>>>>>>> feat/integration_produits:src/Services/auth.service.ts
